// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['zepto', 'mt-base', 'text!../templates/mt-minimize.html', 'css!../css/mt-minimize.css', 'css!../css/app.css'], function($, MTBase, template) {
    var MTMinimize;
    return MTMinimize = (function(_super) {
      var _tapOrClick;

      __extends(MTMinimize, _super);

      MTMinimize.name = 'MTMinimize';

      function MTMinimize() {
        this.expandOrCloseItem = __bind(this.expandOrCloseItem, this);
        return MTMinimize.__super__.constructor.apply(this, arguments);
      }

      _tapOrClick = __indexOf.call(window, 'ontouchstart') >= 0 ? 'tap' : 'click';

      MTMinimize.prototype.init = function() {};

      MTMinimize.prototype.setupDOM = function() {
        this.el.append(template);
        return MTMinimize.__super__.setupDOM.apply(this, arguments);
      };

      MTMinimize.prototype.attachEvents = function() {
        var _this = this;
        this.el.on(_tapOrClick, '.item', this.expandOrCloseItem);
        return this.el.on('webkitAnimationEnd animationend', '.item', function(e) {
          if (e.originalEvent.animationName === 'minimize') {
            _this.el.off(_tapOrClick, '.close', _this.expandOrCloseItem);
            return _this.el.off(_tapOrClick).on(_tapOrClick, '.item', _this.expandOrCloseItem);
          } else {
            _this.el.on(_tapOrClick, '.close', _this.expandOrCloseItem);
            return _this.el.off(_tapOrClick, '.item', _this.expandOrCloseItem);
          }
        });
      };

      MTMinimize.prototype.expandOrCloseItem = function(e) {
        var $item;
        e.preventDefault();
        e.stopPropagation();
        $item = this.el.find('.item');
        if ($item.hasClass('minimized')) {
          return $item.removeClass('minimized');
        } else {
          return $item.addClass('minimized');
        }
      };

      return MTMinimize;

    })(MTBase);
  });

}).call(this);
