// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['coffee-physics/math/Vector', 'coffee-physics/behaviour/Behaviour'], function(Vector, Behaviour) {
    /* Constant Force Behaviour
    */

    var ConstantForce;
    return ConstantForce = (function(_super) {

      __extends(ConstantForce, _super);

      ConstantForce.name = 'ConstantForce';

      function ConstantForce(force) {
        this.force = force != null ? force : new Vector();
        ConstantForce.__super__.constructor.apply(this, arguments);
      }

      ConstantForce.prototype.apply = function(p, dt, index) {
        return p.acc.add(this.force);
      };

      return ConstantForce;

    })(Behaviour);
  });

}).call(this);
